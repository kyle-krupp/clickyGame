{"version":3,"sources":["components/Nav/Nav.js","components/Jumbotron/Jumbotron.js","components/ClickyCard/ClickyCard.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","id","href","concat","navCenter","currentScore","topScore","Jumbotron","style","width","height","backgroundColor","ClickyCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","test","_this2","key","alt","name","src","image","onClick","handleClickevent","React","Component","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","App","friends","gameOver","restArray","map","item","i","clicked","setState","alert","addSomeScore","console","log","newArray","components_Nav_Nav","components_Jumbotron_Jumbotron","Grid","Row","friend","Col","xs","md","ClickyCard_ClickyCard_ClickyCard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7fbf0e9c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-danger top-bar fixed\" id=\"navbar\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <a className=\"navbar-brand\" href=\"/\">\n          Clicky Game\n        </a>\n      </div>\n      <div className=\"col\">\n        <h3>{`${props.navCenter||\"Click an image to begin!!\"}`}\n        </h3>\n      </div>\n      <div className=\"col\">\n        <h3>\n          <span>\n            Score: {`${props.currentScore||\"0\"}`} &nbsp;\n          </span>\n          <span>\n          | &nbsp;  Top Score: {`${props.topScore||\"0\"}`}\n          </span>\n        </h3>\n      </div>\n    </div>\n  </nav>\n);\n\nexport default Nav;\n","import React from 'react';\nimport \"./Jumbotron.css\";\n\n\nconst Jumbotron = () =>{\n    return(\n        <div className=\"jumbotron jumbotron-fluid backgroundForJum\">\n            <div className=\"container text text-center\">\n                <h1 className=\"display-3\">Your 2018 World Series Champions</h1>\n                <p className=\"lead\">The 2018 Red Sox team had some memorable faces, can you remember them all? Click on each image, but only once!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;\n\n","import React from 'react';\nimport './ClickyCard.css'\n\nconst style = {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: 'green'\n};\n\n\nexport default class ClickyCard extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state =({\n            test:1\n        });\n    \n    };\n\n    render(){\n\n\n    // console.log(this.props.id);\n    \n        return (\n            <div className=\"card text-center mag\"  key={this.props.id}>\n                <div className=\"card-body\" style={style} >\n                    <img\n                        className=\"clickImage\"\n                        alt={this.props.name}\n                        src={this.props.image}\n                        key={this.props.id}\n                        onClick={() => this.props.handleClickevent(this.props.id)}/>\n                </div>\n            </div>\n        )\n\n    }\n\n\n    // Home.propTypes ={\n    //     name:this.propTypes.string,\n    //     handleClickevent:this.propTypes.func\n    // }\n\n}\n\n\n\n\n// export default ClickyCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Jumnotron from \"./components/Jumbotron\";\nimport ClickyCard from \"./components/ClickyCard\";\nimport friends from \"./friends.json\";\n\nimport { Row, Col, Grid } from \"react-bootstrap\";\n\n// import { uptime } from \"os\";\n\n// from this https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    friends,\n    navCenter: \"\",\n    // navCenter can be  \"You guessed incorrectly!!\" or \"You guessed correctly!!\"\n    currentScore: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ friends: shuffle(this.state.friends)});\n    // console.log(\"first shuffle array : \", this.state.friends);\n  }\n\n\n  gameOver = () => {\n\n    var restArray = this.state.friends.map((item , i) => {\n      item.clicked = false;\n      return restArray;\n    });\n    \n    this.setState({\n      friends: restArray,\n      currentScore: 0,\n      navCenter: \"Click an Image to begin!!\",\n    })\n\n    alert(\"you have already clicked!! Game Over!!!\");\n    return true;\n  };\n\n  addSomeScore = () =>{\n    if(this.state.currentScore === this.state.topScore){\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        topScore: this.state.topScore + 1,\n      })\n\n    }else if(this.state.currentScore < this.state.topScore){\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n      })\n    }\n    \n    return true;\n  }\n\n  handleClickevent = id => {\n    console.log(\"what is this ID for:\" , id);\n    var newArray = this.state.friends.map((item , i ) => {\n      // console.log(\"this is item: \" , item);\n      if(item.id === id){\n        if(item.clicked === true){\n          this.gameOver();\n        }else{\n          item.clicked = true;\n          this.addSomeScore();\n        }\n      }\n\n      return item;\n    });\n    this.setState({\n      friends:shuffle(newArray),\n      navCenter:\"You guessed correctly!!\"\n    });\n\n    console.log(\"the new array: \" , this.state.friends);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          navCenter={this.state.navCenter}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Jumnotron />\n\n        <Grid>\n          <Row className=\"show-grid\">\n            {this.state.friends.map((friend , i) => (\n              <Col xs={6} md={3} key={i}>\n                <ClickyCard\n                  name={friend.name}\n                  image={friend.image}\n                  key={i}\n                  id={friend.id}\n                  handleClickevent={this.handleClickevent}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n\n"],"sourceRoot":""}