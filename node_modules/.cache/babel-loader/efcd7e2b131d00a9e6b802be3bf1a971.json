{"ast":null,"code":"import _classCallCheck from \"/Users/kylekrupp/Documents/Code/React_ClickyGame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kylekrupp/Documents/Code/React_ClickyGame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kylekrupp/Documents/Code/React_ClickyGame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kylekrupp/Documents/Code/React_ClickyGame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kylekrupp/Documents/Code/React_ClickyGame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kylekrupp/Documents/Code/React_ClickyGame/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Jumnotron from \"./components/Jumbotron\";\nimport ClickyCard from \"./components/ClickyCard\";\nimport Footer from \"./components/Footer/Index\";\nimport friends from \"./friends.json\";\nimport { Row, Col, Grid } from \"react-bootstrap\"; // import { uptime } from \"os\";\n// from this https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      navCenter: \"\",\n      // navCenter can be  \"You guessed incorrectly!!\" or \"You guessed correctly!!\"\n      currentScore: 0,\n      topScore: 0\n    };\n\n    _this.gameOver = function () {\n      var restArray = _this.state.friends.map(function (item, i) {\n        item.clicked = false;\n        return restArray;\n      });\n\n      _this.setState({\n        friends: restArray,\n        currentScore: 0,\n        navCenter: \"Click an Image to begin!!\"\n      });\n\n      alert(\"you have already clicked!! Game Over!!!\");\n      return true;\n    };\n\n    _this.addSomeScore = function () {\n      if (_this.state.currentScore === _this.state.topScore) {\n        _this.setState({\n          currentScore: _this.state.currentScore + 1,\n          topScore: _this.state.topScore + 1\n        });\n      } else if (_this.state.currentScore < _this.state.topScore) {\n        _this.setState({\n          currentScore: _this.state.currentScore + 1\n        });\n      }\n\n      return true;\n    };\n\n    _this.handleClickevent = function (id) {\n      console.log(\"what is this ID for:\", id);\n\n      var newArray = _this.state.friends.map(function (item, i) {\n        // console.log(\"this is item: \" , item);\n        if (item.id === id) {\n          if (item.clicked === true) {\n            _this.gameOver();\n          } else {\n            item.clicked = true;\n\n            _this.addSomeScore();\n          }\n        }\n\n        return item;\n      });\n\n      _this.setState({\n        friends: shuffle(newArray),\n        navCenter: \"You guessed correctly!!\"\n      });\n\n      console.log(\"the new array: \", _this.state.friends);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        friends: shuffle(this.state.friends)\n      }); // console.log(\"first shuffle array : \", this.state.friends);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        navCenter: this.state.navCenter,\n        currentScore: this.state.currentScore,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(Jumnotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.state.friends.map(function (friend, i) {\n        return React.createElement(Col, {\n          xs: 6,\n          md: 3,\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(ClickyCard, {\n          name: friend.name,\n          image: friend.image,\n          key: i,\n          id: friend.id,\n          handleClickevent: _this2.handleClickevent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      }))), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/kylekrupp/Documents/Code/React_ClickyGame/src/App.js"],"names":["React","Component","Nav","Jumnotron","ClickyCard","Footer","friends","Row","Col","Grid","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","App","state","navCenter","currentScore","topScore","gameOver","restArray","map","item","i","clicked","setState","alert","addSomeScore","handleClickevent","id","console","log","newArray","friend","name","image"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,QAA+B,iBAA/B,C,CAEA;AAEA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MACEC,cADF;AAAA,MAEEC,WAFF,CADsB,CAKtB;;AACA,SAAO,MAAMH,YAAb,EAA2B;AACzB;AACAG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB,CAHyB,CAKzB;;AACAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AACD,SAAOH,KAAP;AACD;;IAEKQ,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNd,MAAAA,OAAO,EAAPA,OADM;AAENe,MAAAA,SAAS,EAAE,EAFL;AAGN;AACAC,MAAAA,YAAY,EAAE,CAJR;AAKNC,MAAAA,QAAQ,EAAE;AALJ,K;;UAcRC,Q,GAAW,YAAM;AAEf,UAAIC,SAAS,GAAG,MAAKL,KAAL,CAAWd,OAAX,CAAmBoB,GAAnB,CAAuB,UAACC,IAAD,EAAQC,CAAR,EAAc;AACnDD,QAAAA,IAAI,CAACE,OAAL,GAAe,KAAf;AACA,eAAOJ,SAAP;AACD,OAHe,CAAhB;;AAKA,YAAKK,QAAL,CAAc;AACZxB,QAAAA,OAAO,EAAEmB,SADG;AAEZH,QAAAA,YAAY,EAAE,CAFF;AAGZD,QAAAA,SAAS,EAAE;AAHC,OAAd;;AAMAU,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,aAAO,IAAP;AACD,K;;UAEDC,Y,GAAe,YAAK;AAClB,UAAG,MAAKZ,KAAL,CAAWE,YAAX,KAA4B,MAAKF,KAAL,CAAWG,QAA1C,EAAmD;AACjD,cAAKO,QAAL,CAAc;AACZR,UAAAA,YAAY,EAAE,MAAKF,KAAL,CAAWE,YAAX,GAA0B,CAD5B;AAEZC,UAAAA,QAAQ,EAAE,MAAKH,KAAL,CAAWG,QAAX,GAAsB;AAFpB,SAAd;AAKD,OAND,MAMM,IAAG,MAAKH,KAAL,CAAWE,YAAX,GAA0B,MAAKF,KAAL,CAAWG,QAAxC,EAAiD;AACrD,cAAKO,QAAL,CAAc;AACZR,UAAAA,YAAY,EAAE,MAAKF,KAAL,CAAWE,YAAX,GAA0B;AAD5B,SAAd;AAGD;;AAED,aAAO,IAAP;AACD,K;;UAEDW,gB,GAAmB,UAAAC,EAAE,EAAI;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAqCF,EAArC;;AACA,UAAIG,QAAQ,GAAG,MAAKjB,KAAL,CAAWd,OAAX,CAAmBoB,GAAnB,CAAuB,UAACC,IAAD,EAAQC,CAAR,EAAe;AACnD;AACA,YAAGD,IAAI,CAACO,EAAL,KAAYA,EAAf,EAAkB;AAChB,cAAGP,IAAI,CAACE,OAAL,KAAiB,IAApB,EAAyB;AACvB,kBAAKL,QAAL;AACD,WAFD,MAEK;AACHG,YAAAA,IAAI,CAACE,OAAL,GAAe,IAAf;;AACA,kBAAKG,YAAL;AACD;AACF;;AAED,eAAOL,IAAP;AACD,OAZc,CAAf;;AAaA,YAAKG,QAAL,CAAc;AACZxB,QAAAA,OAAO,EAACI,OAAO,CAAC2B,QAAD,CADH;AAEZhB,QAAAA,SAAS,EAAC;AAFE,OAAd;;AAKAc,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAAgC,MAAKhB,KAAL,CAAWd,OAA3C;AACD,K;;;;;;;wCA5DmB;AAClB,WAAKwB,QAAL,CAAc;AAAExB,QAAAA,OAAO,EAAEI,OAAO,CAAC,KAAKU,KAAL,CAAWd,OAAZ;AAAlB,OAAd,EADkB,CAElB;AACD;;;6BA2DQ;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AACE,QAAA,SAAS,EAAE,KAAKc,KAAL,CAAWC,SADxB;AAEE,QAAA,YAAY,EAAE,KAAKD,KAAL,CAAWE,YAF3B;AAGE,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAQE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKH,KAAL,CAAWd,OAAX,CAAmBoB,GAAnB,CAAuB,UAACY,MAAD,EAAUV,CAAV;AAAA,eACtB,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAY,UAAA,EAAE,EAAE,CAAhB;AAAmB,UAAA,GAAG,EAAEA,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AACE,UAAA,IAAI,EAAEU,MAAM,CAACC,IADf;AAEE,UAAA,KAAK,EAAED,MAAM,CAACE,KAFhB;AAGE,UAAA,GAAG,EAAEZ,CAHP;AAIE,UAAA,EAAE,EAAEU,MAAM,CAACJ,EAJb;AAKE,UAAA,gBAAgB,EAAE,MAAI,CAACD,gBALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADsB;AAAA,OAAvB,CADH,CADF,CARF,EAuBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,CADF;AA2BD;;;;EAnGehC,S;;AAsGlB,eAAekB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Jumnotron from \"./components/Jumbotron\";\nimport ClickyCard from \"./components/ClickyCard\";\nimport Footer from \"./components/Footer/Index\";\nimport friends from \"./friends.json\";\n\nimport { Row, Col, Grid } from \"react-bootstrap\";\n\n// import { uptime } from \"os\";\n\n// from this https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    friends,\n    navCenter: \"\",\n    // navCenter can be  \"You guessed incorrectly!!\" or \"You guessed correctly!!\"\n    currentScore: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ friends: shuffle(this.state.friends)});\n    // console.log(\"first shuffle array : \", this.state.friends);\n  }\n\n\n  gameOver = () => {\n\n    var restArray = this.state.friends.map((item , i) => {\n      item.clicked = false;\n      return restArray;\n    });\n    \n    this.setState({\n      friends: restArray,\n      currentScore: 0,\n      navCenter: \"Click an Image to begin!!\",\n    })\n\n    alert(\"you have already clicked!! Game Over!!!\");\n    return true;\n  };\n\n  addSomeScore = () =>{\n    if(this.state.currentScore === this.state.topScore){\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        topScore: this.state.topScore + 1,\n      })\n\n    }else if(this.state.currentScore < this.state.topScore){\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n      })\n    }\n    \n    return true;\n  }\n\n  handleClickevent = id => {\n    console.log(\"what is this ID for:\" , id);\n    var newArray = this.state.friends.map((item , i ) => {\n      // console.log(\"this is item: \" , item);\n      if(item.id === id){\n        if(item.clicked === true){\n          this.gameOver();\n        }else{\n          item.clicked = true;\n          this.addSomeScore();\n        }\n      }\n\n      return item;\n    });\n    this.setState({\n      friends:shuffle(newArray),\n      navCenter:\"You guessed correctly!!\"\n    });\n\n    console.log(\"the new array: \" , this.state.friends);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          navCenter={this.state.navCenter}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Jumnotron />\n\n        <Grid>\n          <Row className=\"show-grid\">\n            {this.state.friends.map((friend , i) => (\n              <Col xs={6} md={3} key={i}>\n                <ClickyCard\n                  name={friend.name}\n                  image={friend.image}\n                  key={i}\n                  id={friend.id}\n                  handleClickevent={this.handleClickevent}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Grid>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}